/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
parser grammar InternalEclParser;

options {
	tokenVocab=InternalEclLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package org.akitta.snomed.ecl.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.akitta.snomed.ecl.services.EclGrammarAccess;

}
@members {
	private EclGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("NumberSign", "'#'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("FullStopFullStop", "'..'");
		tokenNameToValue.put("LessThanSignLessThanSign", "'<<'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("GreaterThanSignGreaterThanSign", "'>>'");
		tokenNameToValue.put("OR", "'OR'");
		tokenNameToValue.put("AND", "'AND'");
		tokenNameToValue.put("MINUS", "'MINUS'");
	}

	public void setGrammarAccess(EclGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleScript
entryRuleScript
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScriptAccess().getConstraintAssignment()); }
		(rule__Script__ConstraintAssignment)?
		{ after(grammarAccess.getScriptAccess().getConstraintAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionConstraint
entryRuleExpressionConstraint
:
{ before(grammarAccess.getExpressionConstraintRule()); }
	 ruleExpressionConstraint
{ after(grammarAccess.getExpressionConstraintRule()); } 
	 EOF 
;

// Rule ExpressionConstraint
ruleExpressionConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionConstraintAccess().getExclusionExpressionConstraintParserRuleCall()); }
		ruleExclusionExpressionConstraint
		{ after(grammarAccess.getExpressionConstraintAccess().getExclusionExpressionConstraintParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExclusionExpressionConstraint
entryRuleExclusionExpressionConstraint
:
{ before(grammarAccess.getExclusionExpressionConstraintRule()); }
	 ruleExclusionExpressionConstraint
{ after(grammarAccess.getExclusionExpressionConstraintRule()); } 
	 EOF 
;

// Rule ExclusionExpressionConstraint
ruleExclusionExpressionConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExclusionExpressionConstraintAccess().getGroup()); }
		(rule__ExclusionExpressionConstraint__Group__0)
		{ after(grammarAccess.getExclusionExpressionConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisjunctionExpressionConstraint
entryRuleDisjunctionExpressionConstraint
:
{ before(grammarAccess.getDisjunctionExpressionConstraintRule()); }
	 ruleDisjunctionExpressionConstraint
{ after(grammarAccess.getDisjunctionExpressionConstraintRule()); } 
	 EOF 
;

// Rule DisjunctionExpressionConstraint
ruleDisjunctionExpressionConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup()); }
		(rule__DisjunctionExpressionConstraint__Group__0)
		{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConjunctionExpressionConstraint
entryRuleConjunctionExpressionConstraint
:
{ before(grammarAccess.getConjunctionExpressionConstraintRule()); }
	 ruleConjunctionExpressionConstraint
{ after(grammarAccess.getConjunctionExpressionConstraintRule()); } 
	 EOF 
;

// Rule ConjunctionExpressionConstraint
ruleConjunctionExpressionConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup()); }
		(rule__ConjunctionExpressionConstraint__Group__0)
		{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefinedExpressionConstraint
entryRuleRefinedExpressionConstraint
:
{ before(grammarAccess.getRefinedExpressionConstraintRule()); }
	 ruleRefinedExpressionConstraint
{ after(grammarAccess.getRefinedExpressionConstraintRule()); } 
	 EOF 
;

// Rule RefinedExpressionConstraint
ruleRefinedExpressionConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefinedExpressionConstraintAccess().getGroup()); }
		(rule__RefinedExpressionConstraint__Group__0)
		{ after(grammarAccess.getRefinedExpressionConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefinement
entryRuleRefinement
:
{ before(grammarAccess.getRefinementRule()); }
	 ruleRefinement
{ after(grammarAccess.getRefinementRule()); } 
	 EOF 
;

// Rule Refinement
ruleRefinement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefinementAccess().getDisjunctionRefinementSetParserRuleCall()); }
		ruleDisjunctionRefinementSet
		{ after(grammarAccess.getRefinementAccess().getDisjunctionRefinementSetParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisjunctionRefinementSet
entryRuleDisjunctionRefinementSet
:
{ before(grammarAccess.getDisjunctionRefinementSetRule()); }
	 ruleDisjunctionRefinementSet
{ after(grammarAccess.getDisjunctionRefinementSetRule()); } 
	 EOF 
;

// Rule DisjunctionRefinementSet
ruleDisjunctionRefinementSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDisjunctionRefinementSetAccess().getGroup()); }
		(rule__DisjunctionRefinementSet__Group__0)
		{ after(grammarAccess.getDisjunctionRefinementSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConjunctionRefinementSet
entryRuleConjunctionRefinementSet
:
{ before(grammarAccess.getConjunctionRefinementSetRule()); }
	 ruleConjunctionRefinementSet
{ after(grammarAccess.getConjunctionRefinementSetRule()); } 
	 EOF 
;

// Rule ConjunctionRefinementSet
ruleConjunctionRefinementSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConjunctionRefinementSetAccess().getGroup()); }
		(rule__ConjunctionRefinementSet__Group__0)
		{ after(grammarAccess.getConjunctionRefinementSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubRefinement
entryRuleSubRefinement
:
{ before(grammarAccess.getSubRefinementRule()); }
	 ruleSubRefinement
{ after(grammarAccess.getSubRefinementRule()); } 
	 EOF 
;

// Rule SubRefinement
ruleSubRefinement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubRefinementAccess().getAlternatives()); }
		(rule__SubRefinement__Alternatives)
		{ after(grammarAccess.getSubRefinementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeSetRefinement
entryRuleAttributeSetRefinement
:
{ before(grammarAccess.getAttributeSetRefinementRule()); }
	 ruleAttributeSetRefinement
{ after(grammarAccess.getAttributeSetRefinementRule()); } 
	 EOF 
;

// Rule AttributeSetRefinement
ruleAttributeSetRefinement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeSetRefinementAccess().getAttributeSetAssignment()); }
		(rule__AttributeSetRefinement__AttributeSetAssignment)
		{ after(grammarAccess.getAttributeSetRefinementAccess().getAttributeSetAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeGroupRefinement
entryRuleAttributeGroupRefinement
:
{ before(grammarAccess.getAttributeGroupRefinementRule()); }
	 ruleAttributeGroupRefinement
{ after(grammarAccess.getAttributeGroupRefinementRule()); } 
	 EOF 
;

// Rule AttributeGroupRefinement
ruleAttributeGroupRefinement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeGroupRefinementAccess().getAttributeGroupAssignment()); }
		(rule__AttributeGroupRefinement__AttributeGroupAssignment)
		{ after(grammarAccess.getAttributeGroupRefinementAccess().getAttributeGroupAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisjunctionAttributeSet
entryRuleDisjunctionAttributeSet
:
{ before(grammarAccess.getDisjunctionAttributeSetRule()); }
	 ruleDisjunctionAttributeSet
{ after(grammarAccess.getDisjunctionAttributeSetRule()); } 
	 EOF 
;

// Rule DisjunctionAttributeSet
ruleDisjunctionAttributeSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDisjunctionAttributeSetAccess().getGroup()); }
		(rule__DisjunctionAttributeSet__Group__0)
		{ after(grammarAccess.getDisjunctionAttributeSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConjunctionAttributeSet
entryRuleConjunctionAttributeSet
:
{ before(grammarAccess.getConjunctionAttributeSetRule()); }
	 ruleConjunctionAttributeSet
{ after(grammarAccess.getConjunctionAttributeSetRule()); } 
	 EOF 
;

// Rule ConjunctionAttributeSet
ruleConjunctionAttributeSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConjunctionAttributeSetAccess().getGroup()); }
		(rule__ConjunctionAttributeSet__Group__0)
		{ after(grammarAccess.getConjunctionAttributeSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryAttributeSet
entryRulePrimaryAttributeSet
:
{ before(grammarAccess.getPrimaryAttributeSetRule()); }
	 rulePrimaryAttributeSet
{ after(grammarAccess.getPrimaryAttributeSetRule()); } 
	 EOF 
;

// Rule PrimaryAttributeSet
rulePrimaryAttributeSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAttributeSetAccess().getAlternatives()); }
		(rule__PrimaryAttributeSet__Alternatives)
		{ after(grammarAccess.getPrimaryAttributeSetAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCardinality
entryRuleCardinality
:
{ before(grammarAccess.getCardinalityRule()); }
	 ruleCardinality
{ after(grammarAccess.getCardinalityRule()); } 
	 EOF 
;

// Rule Cardinality
ruleCardinality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCardinalityAccess().getGroup()); }
		(rule__Cardinality__Group__0)
		{ after(grammarAccess.getCardinalityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeValue
entryRuleAttributeValue
:
{ before(grammarAccess.getAttributeValueRule()); }
	 ruleAttributeValue
{ after(grammarAccess.getAttributeValueRule()); } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeValueAccess().getAlternatives()); }
		(rule__AttributeValue__Alternatives)
		{ after(grammarAccess.getAttributeValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getGroup()); }
		(rule__StringValue__Group__0)
		{ after(grammarAccess.getStringValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericValue
entryRuleNumericValue
:
{ before(grammarAccess.getNumericValueRule()); }
	 ruleNumericValue
{ after(grammarAccess.getNumericValueRule()); } 
	 EOF 
;

// Rule NumericValue
ruleNumericValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericValueAccess().getGroup()); }
		(rule__NumericValue__Group__0)
		{ after(grammarAccess.getNumericValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getGroup()); }
		(rule__Number__Group__0)
		{ after(grammarAccess.getNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionValue
entryRuleExpressionValue
:
{ before(grammarAccess.getExpressionValueRule()); }
	 ruleExpressionValue
{ after(grammarAccess.getExpressionValueRule()); } 
	 EOF 
;

// Rule ExpressionValue
ruleExpressionValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionValueAccess().getGroup()); }
		(rule__ExpressionValue__Group__0)
		{ after(grammarAccess.getExpressionValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesizedAttributeSet
entryRuleParenthesizedAttributeSet
:
{ before(grammarAccess.getParenthesizedAttributeSetRule()); }
	 ruleParenthesizedAttributeSet
{ after(grammarAccess.getParenthesizedAttributeSetRule()); } 
	 EOF 
;

// Rule ParenthesizedAttributeSet
ruleParenthesizedAttributeSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesizedAttributeSetAccess().getGroup()); }
		(rule__ParenthesizedAttributeSet__Group__0)
		{ after(grammarAccess.getParenthesizedAttributeSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeGroup
entryRuleAttributeGroup
:
{ before(grammarAccess.getAttributeGroupRule()); }
	 ruleAttributeGroup
{ after(grammarAccess.getAttributeGroupRule()); } 
	 EOF 
;

// Rule AttributeGroup
ruleAttributeGroup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeGroupAccess().getGroup()); }
		(rule__AttributeGroup__Group__0)
		{ after(grammarAccess.getAttributeGroupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesizedRefinement
entryRuleParenthesizedRefinement
:
{ before(grammarAccess.getParenthesizedRefinementRule()); }
	 ruleParenthesizedRefinement
{ after(grammarAccess.getParenthesizedRefinementRule()); } 
	 EOF 
;

// Rule ParenthesizedRefinement
ruleParenthesizedRefinement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesizedRefinementAccess().getGroup()); }
		(rule__ParenthesizedRefinement__Group__0)
		{ after(grammarAccess.getParenthesizedRefinementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpressionConstraint
entryRulePrimaryExpressionConstraint
:
{ before(grammarAccess.getPrimaryExpressionConstraintRule()); }
	 rulePrimaryExpressionConstraint
{ after(grammarAccess.getPrimaryExpressionConstraintRule()); } 
	 EOF 
;

// Rule PrimaryExpressionConstraint
rulePrimaryExpressionConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionConstraintAccess().getAlternatives()); }
		(rule__PrimaryExpressionConstraint__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionConstraintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleExpressionConstraint
entryRuleSimpleExpressionConstraint
:
{ before(grammarAccess.getSimpleExpressionConstraintRule()); }
	 ruleSimpleExpressionConstraint
{ after(grammarAccess.getSimpleExpressionConstraintRule()); } 
	 EOF 
;

// Rule SimpleExpressionConstraint
ruleSimpleExpressionConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleExpressionConstraintAccess().getGroup()); }
		(rule__SimpleExpressionConstraint__Group__0)
		{ after(grammarAccess.getSimpleExpressionConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFocusConcept
entryRuleFocusConcept
:
{ before(grammarAccess.getFocusConceptRule()); }
	 ruleFocusConcept
{ after(grammarAccess.getFocusConceptRule()); } 
	 EOF 
;

// Rule FocusConcept
ruleFocusConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFocusConceptAccess().getGroup()); }
		(rule__FocusConcept__Group__0)
		{ after(grammarAccess.getFocusConceptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConceptReference
entryRuleConceptReference
:
{ before(grammarAccess.getConceptReferenceRule()); }
	 ruleConceptReference
{ after(grammarAccess.getConceptReferenceRule()); } 
	 EOF 
;

// Rule ConceptReference
ruleConceptReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptReferenceAccess().getGroup()); }
		(rule__ConceptReference__Group__0)
		{ after(grammarAccess.getConceptReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConceptID
entryRuleConceptID
:
{ before(grammarAccess.getConceptIDRule()); }
	 ruleConceptID
{ after(grammarAccess.getConceptIDRule()); } 
	 EOF 
;

// Rule ConceptID
ruleConceptID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptIDAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getConceptIDAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ExpressionComparisonOperator
ruleExpressionComparisonOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionComparisonOperatorAccess().getAlternatives()); }
		(rule__ExpressionComparisonOperator__Alternatives)
		{ after(grammarAccess.getExpressionComparisonOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule StringComparisonOperator
ruleStringComparisonOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringComparisonOperatorAccess().getAlternatives()); }
		(rule__StringComparisonOperator__Alternatives)
		{ after(grammarAccess.getStringComparisonOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule NumericComparisonOperator
ruleNumericComparisonOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericComparisonOperatorAccess().getAlternatives()); }
		(rule__NumericComparisonOperator__Alternatives)
		{ after(grammarAccess.getNumericComparisonOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ConstraintOperator
ruleConstraintOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintOperatorAccess().getAlternatives()); }
		(rule__ConstraintOperator__Alternatives)
		{ after(grammarAccess.getConstraintOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AttributeOperator
ruleAttributeOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeOperatorAccess().getAlternatives()); }
		(rule__AttributeOperator__Alternatives)
		{ after(grammarAccess.getAttributeOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ConjunctionOperator
ruleConjunctionOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionOperatorAccess().getAlternatives()); }
		(rule__ConjunctionOperator__Alternatives)
		{ after(grammarAccess.getConjunctionOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DisjunctionOperator
ruleDisjunctionOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionOperatorAccess().getDISJUNCTIONEnumLiteralDeclaration()); }
		(OR)
		{ after(grammarAccess.getDisjunctionOperatorAccess().getDISJUNCTIONEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ExclusionOperator
ruleExclusionOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExclusionOperatorAccess().getEXCLUSIONEnumLiteralDeclaration()); }
		(MINUS)
		{ after(grammarAccess.getExclusionOperatorAccess().getEXCLUSIONEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubRefinement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubRefinementAccess().getAttributeSetRefinementParserRuleCall_0()); }
		ruleAttributeSetRefinement
		{ after(grammarAccess.getSubRefinementAccess().getAttributeSetRefinementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubRefinementAccess().getAttributeGroupRefinementParserRuleCall_1()); }
		ruleAttributeGroupRefinement
		{ after(grammarAccess.getSubRefinementAccess().getAttributeGroupRefinementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSubRefinementAccess().getParenthesizedRefinementParserRuleCall_2()); }
		ruleParenthesizedRefinement
		{ after(grammarAccess.getSubRefinementAccess().getParenthesizedRefinementParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryAttributeSet__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAttributeSetAccess().getParenthesizedAttributeSetParserRuleCall_0()); }
		ruleParenthesizedAttributeSet
		{ after(grammarAccess.getPrimaryAttributeSetAccess().getParenthesizedAttributeSetParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAttributeSetAccess().getAttributeParserRuleCall_1()); }
		ruleAttribute
		{ after(grammarAccess.getPrimaryAttributeSetAccess().getAttributeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getConceptRefAssignment_3_0()); }
		(rule__Attribute__ConceptRefAssignment_3_0)
		{ after(grammarAccess.getAttributeAccess().getConceptRefAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getWildcardAssignment_3_1()); }
		(rule__Attribute__WildcardAssignment_3_1)
		{ after(grammarAccess.getAttributeAccess().getWildcardAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCardinalityAccess().getToAssignment_3_0()); }
		(rule__Cardinality__ToAssignment_3_0)
		{ after(grammarAccess.getCardinalityAccess().getToAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getCardinalityAccess().getManyAssignment_3_1()); }
		(rule__Cardinality__ManyAssignment_3_1)
		{ after(grammarAccess.getCardinalityAccess().getManyAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeValueAccess().getExpressionValueParserRuleCall_0()); }
		ruleExpressionValue
		{ after(grammarAccess.getAttributeValueAccess().getExpressionValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeValueAccess().getNumericValueParserRuleCall_1()); }
		ruleNumericValue
		{ after(grammarAccess.getAttributeValueAccess().getNumericValueParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeValueAccess().getStringValueParserRuleCall_2()); }
		ruleStringValue
		{ after(grammarAccess.getAttributeValueAccess().getStringValueParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpressionConstraint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionConstraintAccess().getSimpleExpressionConstraintParserRuleCall_0()); }
		ruleSimpleExpressionConstraint
		{ after(grammarAccess.getPrimaryExpressionConstraintAccess().getSimpleExpressionConstraintParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionConstraintAccess().getGroup_1()); }
		(rule__PrimaryExpressionConstraint__Group_1__0)
		{ after(grammarAccess.getPrimaryExpressionConstraintAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FocusConcept__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFocusConceptAccess().getConceptRefAssignment_1_0()); }
		(rule__FocusConcept__ConceptRefAssignment_1_0)
		{ after(grammarAccess.getFocusConceptAccess().getConceptRefAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getFocusConceptAccess().getWildcardAssignment_1_1()); }
		(rule__FocusConcept__WildcardAssignment_1_1)
		{ after(grammarAccess.getFocusConceptAccess().getWildcardAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionComparisonOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0()); }
		(EqualsSign)
		{ after(grammarAccess.getExpressionComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1()); }
		(ExclamationMarkEqualsSign)
		{ after(grammarAccess.getExpressionComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringComparisonOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0()); }
		(EqualsSign)
		{ after(grammarAccess.getStringComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1()); }
		(ExclamationMarkEqualsSign)
		{ after(grammarAccess.getStringComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericComparisonOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0()); }
		(EqualsSign)
		{ after(grammarAccess.getNumericComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1()); }
		(ExclamationMarkEqualsSign)
		{ after(grammarAccess.getNumericComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getNumericComparisonOperatorAccess().getLESS_THANEnumLiteralDeclaration_2()); }
		(LessThanSign)
		{ after(grammarAccess.getNumericComparisonOperatorAccess().getLESS_THANEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getNumericComparisonOperatorAccess().getLESS_THAN_EQUALSEnumLiteralDeclaration_3()); }
		(LessThanSignEqualsSign)
		{ after(grammarAccess.getNumericComparisonOperatorAccess().getLESS_THAN_EQUALSEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getNumericComparisonOperatorAccess().getGREATER_THANEnumLiteralDeclaration_4()); }
		(GreaterThanSign)
		{ after(grammarAccess.getNumericComparisonOperatorAccess().getGREATER_THANEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getNumericComparisonOperatorAccess().getGREATER_THAN_EQUALSEnumLiteralDeclaration_5()); }
		(GreaterThanSignEqualsSign)
		{ after(grammarAccess.getNumericComparisonOperatorAccess().getGREATER_THAN_EQUALSEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintOperatorAccess().getDESCENDANTEnumLiteralDeclaration_0()); }
		(LessThanSign)
		{ after(grammarAccess.getConstraintOperatorAccess().getDESCENDANTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintOperatorAccess().getDESCENDANT_OR_SELFEnumLiteralDeclaration_1()); }
		(LessThanSignLessThanSign)
		{ after(grammarAccess.getConstraintOperatorAccess().getDESCENDANT_OR_SELFEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintOperatorAccess().getANCESTOREnumLiteralDeclaration_2()); }
		(GreaterThanSign)
		{ after(grammarAccess.getConstraintOperatorAccess().getANCESTOREnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintOperatorAccess().getANCESTOR_OR_SELFEnumLiteralDeclaration_3()); }
		(GreaterThanSignGreaterThanSign)
		{ after(grammarAccess.getConstraintOperatorAccess().getANCESTOR_OR_SELFEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeOperatorAccess().getDESCENDANTEnumLiteralDeclaration_0()); }
		(LessThanSign)
		{ after(grammarAccess.getAttributeOperatorAccess().getDESCENDANTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeOperatorAccess().getDESCENDANT_OR_SELFEnumLiteralDeclaration_1()); }
		(LessThanSignLessThanSign)
		{ after(grammarAccess.getAttributeOperatorAccess().getDESCENDANT_OR_SELFEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionOperatorAccess().getCONJUNCTIONEnumLiteralDeclaration_0()); }
		(AND)
		{ after(grammarAccess.getConjunctionOperatorAccess().getCONJUNCTIONEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getConjunctionOperatorAccess().getCONJUNCTIONEnumLiteralDeclaration_1()); }
		(Comma)
		{ after(grammarAccess.getConjunctionOperatorAccess().getCONJUNCTIONEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusionExpressionConstraint__Group__0__Impl
	rule__ExclusionExpressionConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusionExpressionConstraintAccess().getDisjunctionExpressionConstraintParserRuleCall_0()); }
	ruleDisjunctionExpressionConstraint
	{ after(grammarAccess.getExclusionExpressionConstraintAccess().getDisjunctionExpressionConstraintParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusionExpressionConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1()); }
	(rule__ExclusionExpressionConstraint__Group_1__0)*
	{ after(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusionExpressionConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusionExpressionConstraint__Group_1__0__Impl
	rule__ExclusionExpressionConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1_0()); }
	(rule__ExclusionExpressionConstraint__Group_1_0__0)
	{ after(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusionExpressionConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusionExpressionConstraintAccess().getRightAssignment_1_1()); }
	(rule__ExclusionExpressionConstraint__RightAssignment_1_1)
	{ after(grammarAccess.getExclusionExpressionConstraintAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusionExpressionConstraint__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusionExpressionConstraint__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1_0_0()); }
	(rule__ExclusionExpressionConstraint__Group_1_0_0__0)
	{ after(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusionExpressionConstraint__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusionExpressionConstraint__Group_1_0_0__0__Impl
	rule__ExclusionExpressionConstraint__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusionExpressionConstraintAccess().getExclusionExpressionConstraintLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getExclusionExpressionConstraintAccess().getExclusionExpressionConstraintLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusionExpressionConstraint__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusionExpressionConstraintAccess().getOpAssignment_1_0_0_1()); }
	(rule__ExclusionExpressionConstraint__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getExclusionExpressionConstraintAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionExpressionConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionExpressionConstraint__Group__0__Impl
	rule__DisjunctionExpressionConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getConjunctionExpressionConstraintParserRuleCall_0()); }
	ruleConjunctionExpressionConstraint
	{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getConjunctionExpressionConstraintParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionExpressionConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1()); }
	(rule__DisjunctionExpressionConstraint__Group_1__0)*
	{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionExpressionConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionExpressionConstraint__Group_1__0__Impl
	rule__DisjunctionExpressionConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1_0()); }
	(rule__DisjunctionExpressionConstraint__Group_1_0__0)
	{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionExpressionConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getRightAssignment_1_1()); }
	(rule__DisjunctionExpressionConstraint__RightAssignment_1_1)
	{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionExpressionConstraint__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionExpressionConstraint__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1_0_0()); }
	(rule__DisjunctionExpressionConstraint__Group_1_0_0__0)
	{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionExpressionConstraint__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionExpressionConstraint__Group_1_0_0__0__Impl
	rule__DisjunctionExpressionConstraint__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getDisjunctionExpressionConstraintLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getDisjunctionExpressionConstraintLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionExpressionConstraint__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getOpAssignment_1_0_0_1()); }
	(rule__DisjunctionExpressionConstraint__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionExpressionConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionExpressionConstraint__Group__0__Impl
	rule__ConjunctionExpressionConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getRefinedExpressionConstraintParserRuleCall_0()); }
	ruleRefinedExpressionConstraint
	{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getRefinedExpressionConstraintParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionExpressionConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1()); }
	(rule__ConjunctionExpressionConstraint__Group_1__0)*
	{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionExpressionConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionExpressionConstraint__Group_1__0__Impl
	rule__ConjunctionExpressionConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1_0()); }
	(rule__ConjunctionExpressionConstraint__Group_1_0__0)
	{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionExpressionConstraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getRightAssignment_1_1()); }
	(rule__ConjunctionExpressionConstraint__RightAssignment_1_1)
	{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionExpressionConstraint__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionExpressionConstraint__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1_0_0()); }
	(rule__ConjunctionExpressionConstraint__Group_1_0_0__0)
	{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionExpressionConstraint__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionExpressionConstraint__Group_1_0_0__0__Impl
	rule__ConjunctionExpressionConstraint__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getConjunctionExpressionConstraintLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getConjunctionExpressionConstraintLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionExpressionConstraint__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getOpAssignment_1_0_0_1()); }
	(rule__ConjunctionExpressionConstraint__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefinedExpressionConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinedExpressionConstraint__Group__0__Impl
	rule__RefinedExpressionConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinedExpressionConstraintAccess().getPrimaryExpressionConstraintParserRuleCall_0()); }
	rulePrimaryExpressionConstraint
	{ after(grammarAccess.getRefinedExpressionConstraintAccess().getPrimaryExpressionConstraintParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinedExpressionConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinedExpressionConstraintAccess().getGroup_1()); }
	(rule__RefinedExpressionConstraint__Group_1__0)?
	{ after(grammarAccess.getRefinedExpressionConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefinedExpressionConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinedExpressionConstraint__Group_1__0__Impl
	rule__RefinedExpressionConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinedExpressionConstraintAccess().getRefinedExpressionConstraintTargetAction_1_0()); }
	()
	{ after(grammarAccess.getRefinedExpressionConstraintAccess().getRefinedExpressionConstraintTargetAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinedExpressionConstraint__Group_1__1__Impl
	rule__RefinedExpressionConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinedExpressionConstraintAccess().getColonKeyword_1_1()); }
	Colon
	{ after(grammarAccess.getRefinedExpressionConstraintAccess().getColonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefinedExpressionConstraint__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefinedExpressionConstraintAccess().getRefinementAssignment_1_2()); }
	(rule__RefinedExpressionConstraint__RefinementAssignment_1_2)
	{ after(grammarAccess.getRefinedExpressionConstraintAccess().getRefinementAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionRefinementSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionRefinementSet__Group__0__Impl
	rule__DisjunctionRefinementSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionRefinementSetAccess().getConjunctionRefinementSetParserRuleCall_0()); }
	ruleConjunctionRefinementSet
	{ after(grammarAccess.getDisjunctionRefinementSetAccess().getConjunctionRefinementSetParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionRefinementSet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1()); }
	(rule__DisjunctionRefinementSet__Group_1__0)*
	{ after(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionRefinementSet__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionRefinementSet__Group_1__0__Impl
	rule__DisjunctionRefinementSet__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1_0()); }
	(rule__DisjunctionRefinementSet__Group_1_0__0)
	{ after(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionRefinementSet__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionRefinementSetAccess().getRightAssignment_1_1()); }
	(rule__DisjunctionRefinementSet__RightAssignment_1_1)
	{ after(grammarAccess.getDisjunctionRefinementSetAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionRefinementSet__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionRefinementSet__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1_0_0()); }
	(rule__DisjunctionRefinementSet__Group_1_0_0__0)
	{ after(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionRefinementSet__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionRefinementSet__Group_1_0_0__0__Impl
	rule__DisjunctionRefinementSet__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionRefinementSetAccess().getDisjunctionRefinementSetLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getDisjunctionRefinementSetAccess().getDisjunctionRefinementSetLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionRefinementSet__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionRefinementSetAccess().getOpAssignment_1_0_0_1()); }
	(rule__DisjunctionRefinementSet__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getDisjunctionRefinementSetAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionRefinementSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionRefinementSet__Group__0__Impl
	rule__ConjunctionRefinementSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionRefinementSetAccess().getSubRefinementParserRuleCall_0()); }
	ruleSubRefinement
	{ after(grammarAccess.getConjunctionRefinementSetAccess().getSubRefinementParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionRefinementSet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1()); }
	(rule__ConjunctionRefinementSet__Group_1__0)*
	{ after(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionRefinementSet__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionRefinementSet__Group_1__0__Impl
	rule__ConjunctionRefinementSet__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1_0()); }
	(rule__ConjunctionRefinementSet__Group_1_0__0)
	{ after(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionRefinementSet__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionRefinementSetAccess().getRightAssignment_1_1()); }
	(rule__ConjunctionRefinementSet__RightAssignment_1_1)
	{ after(grammarAccess.getConjunctionRefinementSetAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionRefinementSet__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionRefinementSet__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1_0_0()); }
	(rule__ConjunctionRefinementSet__Group_1_0_0__0)
	{ after(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionRefinementSet__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionRefinementSet__Group_1_0_0__0__Impl
	rule__ConjunctionRefinementSet__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionRefinementSetAccess().getConjunctionRefinementSetLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getConjunctionRefinementSetAccess().getConjunctionRefinementSetLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionRefinementSet__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionRefinementSetAccess().getOpAssignment_1_0_0_1()); }
	(rule__ConjunctionRefinementSet__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getConjunctionRefinementSetAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionAttributeSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionAttributeSet__Group__0__Impl
	rule__DisjunctionAttributeSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAttributeSetAccess().getConjunctionAttributeSetParserRuleCall_0()); }
	ruleConjunctionAttributeSet
	{ after(grammarAccess.getDisjunctionAttributeSetAccess().getConjunctionAttributeSetParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionAttributeSet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1()); }
	(rule__DisjunctionAttributeSet__Group_1__0)*
	{ after(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionAttributeSet__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionAttributeSet__Group_1__0__Impl
	rule__DisjunctionAttributeSet__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1_0()); }
	(rule__DisjunctionAttributeSet__Group_1_0__0)
	{ after(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionAttributeSet__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAttributeSetAccess().getRightAssignment_1_1()); }
	(rule__DisjunctionAttributeSet__RightAssignment_1_1)
	{ after(grammarAccess.getDisjunctionAttributeSetAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionAttributeSet__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionAttributeSet__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1_0_0()); }
	(rule__DisjunctionAttributeSet__Group_1_0_0__0)
	{ after(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionAttributeSet__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionAttributeSet__Group_1_0_0__0__Impl
	rule__DisjunctionAttributeSet__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAttributeSetAccess().getDisjunctionAttributeSetLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getDisjunctionAttributeSetAccess().getDisjunctionAttributeSetLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionAttributeSet__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionAttributeSetAccess().getOpAssignment_1_0_0_1()); }
	(rule__DisjunctionAttributeSet__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getDisjunctionAttributeSetAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionAttributeSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionAttributeSet__Group__0__Impl
	rule__ConjunctionAttributeSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAttributeSetAccess().getPrimaryAttributeSetParserRuleCall_0()); }
	rulePrimaryAttributeSet
	{ after(grammarAccess.getConjunctionAttributeSetAccess().getPrimaryAttributeSetParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionAttributeSet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1()); }
	(rule__ConjunctionAttributeSet__Group_1__0)*
	{ after(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionAttributeSet__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionAttributeSet__Group_1__0__Impl
	rule__ConjunctionAttributeSet__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1_0()); }
	(rule__ConjunctionAttributeSet__Group_1_0__0)
	{ after(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionAttributeSet__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAttributeSetAccess().getRightAssignment_1_1()); }
	(rule__ConjunctionAttributeSet__RightAssignment_1_1)
	{ after(grammarAccess.getConjunctionAttributeSetAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionAttributeSet__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionAttributeSet__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1_0_0()); }
	(rule__ConjunctionAttributeSet__Group_1_0_0__0)
	{ after(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConjunctionAttributeSet__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionAttributeSet__Group_1_0_0__0__Impl
	rule__ConjunctionAttributeSet__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAttributeSetAccess().getConjunctionAttributeSetLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getConjunctionAttributeSetAccess().getConjunctionAttributeSetLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConjunctionAttributeSet__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConjunctionAttributeSetAccess().getOpAssignment_1_0_0_1()); }
	(rule__ConjunctionAttributeSet__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getConjunctionAttributeSetAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getCardinalityAssignment_0()); }
	(rule__Attribute__CardinalityAssignment_0)?
	{ after(grammarAccess.getAttributeAccess().getCardinalityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getReversedAssignment_1()); }
	(rule__Attribute__ReversedAssignment_1)?
	{ after(grammarAccess.getAttributeAccess().getReversedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getOpAssignment_2()); }
	(rule__Attribute__OpAssignment_2)?
	{ after(grammarAccess.getAttributeAccess().getOpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
	rule__Attribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAlternatives_3()); }
	(rule__Attribute__Alternatives_3)
	{ after(grammarAccess.getAttributeAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getValueAssignment_4()); }
	(rule__Attribute__ValueAssignment_4)
	{ after(grammarAccess.getAttributeAccess().getValueAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cardinality__Group__0__Impl
	rule__Cardinality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getCardinalityAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cardinality__Group__1__Impl
	rule__Cardinality__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityAccess().getFromAssignment_1()); }
	(rule__Cardinality__FromAssignment_1)
	{ after(grammarAccess.getCardinalityAccess().getFromAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cardinality__Group__2__Impl
	rule__Cardinality__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityAccess().getFullStopFullStopKeyword_2()); }
	FullStopFullStop
	{ after(grammarAccess.getCardinalityAccess().getFullStopFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cardinality__Group__3__Impl
	rule__Cardinality__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityAccess().getAlternatives_3()); }
	(rule__Cardinality__Alternatives_3)
	{ after(grammarAccess.getCardinalityAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cardinality__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityAccess().getRightSquareBracketKeyword_4()); }
	RightSquareBracket
	{ after(grammarAccess.getCardinalityAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringValue__Group__0__Impl
	rule__StringValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringValueAccess().getOpAssignment_0()); }
	(rule__StringValue__OpAssignment_0)
	{ after(grammarAccess.getStringValueAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringValueAccess().getValueAssignment_1()); }
	(rule__StringValue__ValueAssignment_1)
	{ after(grammarAccess.getStringValueAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumericValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericValue__Group__0__Impl
	rule__NumericValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericValueAccess().getOpAssignment_0()); }
	(rule__NumericValue__OpAssignment_0)
	{ after(grammarAccess.getNumericValueAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericValue__Group__1__Impl
	rule__NumericValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericValueAccess().getNumberSignKeyword_1()); }
	NumberSign
	{ after(grammarAccess.getNumericValueAccess().getNumberSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumericValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumericValueAccess().getValueAssignment_2()); }
	(rule__NumericValue__ValueAssignment_2)
	{ after(grammarAccess.getNumericValueAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getGroup_1()); }
	(rule__Number__Group_1__0)?
	{ after(grammarAccess.getNumberAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__0__Impl
	rule__Number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getFullStopKeyword_1_0()); }
	FullStop
	{ after(grammarAccess.getNumberAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
	{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionValue__Group__0__Impl
	rule__ExpressionValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionValueAccess().getOpAssignment_0()); }
	(rule__ExpressionValue__OpAssignment_0)
	{ after(grammarAccess.getExpressionValueAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionValueAccess().getValueAssignment_1()); }
	(rule__ExpressionValue__ValueAssignment_1)
	{ after(grammarAccess.getExpressionValueAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedAttributeSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedAttributeSet__Group__0__Impl
	rule__ParenthesizedAttributeSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedAttributeSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedAttributeSetAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getParenthesizedAttributeSetAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedAttributeSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedAttributeSet__Group__1__Impl
	rule__ParenthesizedAttributeSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedAttributeSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedAttributeSetAccess().getDisjunctionAttributeSetParserRuleCall_1()); }
	ruleDisjunctionAttributeSet
	{ after(grammarAccess.getParenthesizedAttributeSetAccess().getDisjunctionAttributeSetParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedAttributeSet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedAttributeSet__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedAttributeSet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedAttributeSetAccess().getRightParenthesisKeyword_2()); }
	RightParenthesis
	{ after(grammarAccess.getParenthesizedAttributeSetAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeGroup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeGroup__Group__0__Impl
	rule__AttributeGroup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeGroupAccess().getCardinalityAssignment_0()); }
	(rule__AttributeGroup__CardinalityAssignment_0)?
	{ after(grammarAccess.getAttributeGroupAccess().getCardinalityAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeGroup__Group__1__Impl
	rule__AttributeGroup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeGroupAccess().getLeftCurlyBracketKeyword_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getAttributeGroupAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeGroup__Group__2__Impl
	rule__AttributeGroup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeGroupAccess().getAttributeSetAssignment_2()); }
	(rule__AttributeGroup__AttributeSetAssignment_2)
	{ after(grammarAccess.getAttributeGroupAccess().getAttributeSetAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeGroup__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeGroupAccess().getRightCurlyBracketKeyword_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getAttributeGroupAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedRefinement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedRefinement__Group__0__Impl
	rule__ParenthesizedRefinement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedRefinement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedRefinementAccess().getLeftParenthesisKeyword_0()); }
	LeftParenthesis
	{ after(grammarAccess.getParenthesizedRefinementAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedRefinement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedRefinement__Group__1__Impl
	rule__ParenthesizedRefinement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedRefinement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedRefinementAccess().getRefinementParserRuleCall_1()); }
	ruleRefinement
	{ after(grammarAccess.getParenthesizedRefinementAccess().getRefinementParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedRefinement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedRefinement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedRefinement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedRefinementAccess().getRightParenthesisKeyword_2()); }
	RightParenthesis
	{ after(grammarAccess.getParenthesizedRefinementAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpressionConstraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpressionConstraint__Group_1__0__Impl
	rule__PrimaryExpressionConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpressionConstraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionConstraintAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryExpressionConstraintAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpressionConstraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpressionConstraint__Group_1__1__Impl
	rule__PrimaryExpressionConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpressionConstraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionConstraintAccess().getExpressionConstraintParserRuleCall_1_1()); }
	ruleExpressionConstraint
	{ after(grammarAccess.getPrimaryExpressionConstraintAccess().getExpressionConstraintParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpressionConstraint__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpressionConstraint__Group_1__2__Impl
	rule__PrimaryExpressionConstraint__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpressionConstraint__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionConstraintAccess().getParenthesizedExpressionConstraintCurrentAction_1_2()); }
	()
	{ after(grammarAccess.getPrimaryExpressionConstraintAccess().getParenthesizedExpressionConstraintCurrentAction_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpressionConstraint__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpressionConstraint__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpressionConstraint__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionConstraintAccess().getRightParenthesisKeyword_1_3()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryExpressionConstraintAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpressionConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleExpressionConstraint__Group__0__Impl
	rule__SimpleExpressionConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpressionConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleExpressionConstraintAccess().getOpAssignment_0()); }
	(rule__SimpleExpressionConstraint__OpAssignment_0)?
	{ after(grammarAccess.getSimpleExpressionConstraintAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpressionConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleExpressionConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpressionConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleExpressionConstraintAccess().getConceptAssignment_1()); }
	(rule__SimpleExpressionConstraint__ConceptAssignment_1)
	{ after(grammarAccess.getSimpleExpressionConstraintAccess().getConceptAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FocusConcept__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FocusConcept__Group__0__Impl
	rule__FocusConcept__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FocusConcept__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFocusConceptAccess().getMemberOfAssignment_0()); }
	(rule__FocusConcept__MemberOfAssignment_0)?
	{ after(grammarAccess.getFocusConceptAccess().getMemberOfAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FocusConcept__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FocusConcept__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FocusConcept__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFocusConceptAccess().getAlternatives_1()); }
	(rule__FocusConcept__Alternatives_1)
	{ after(grammarAccess.getFocusConceptAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConceptReference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptReference__Group__0__Impl
	rule__ConceptReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptReference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptReferenceAccess().getIdAssignment_0()); }
	(rule__ConceptReference__IdAssignment_0)
	{ after(grammarAccess.getConceptReferenceAccess().getIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptReference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptReference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptReferenceAccess().getTermAssignment_1()); }
	(rule__ConceptReference__TermAssignment_1)?
	{ after(grammarAccess.getConceptReferenceAccess().getTermAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Script__ConstraintAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getConstraintExpressionConstraintParserRuleCall_0()); }
		ruleExpressionConstraint
		{ after(grammarAccess.getScriptAccess().getConstraintExpressionConstraintParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExclusionExpressionConstraintAccess().getOpExclusionOperatorEnumRuleCall_1_0_0_1_0()); }
		ruleExclusionOperator
		{ after(grammarAccess.getExclusionExpressionConstraintAccess().getOpExclusionOperatorEnumRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusionExpressionConstraint__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExclusionExpressionConstraintAccess().getRightDisjunctionExpressionConstraintParserRuleCall_1_1_0()); }
		ruleDisjunctionExpressionConstraint
		{ after(grammarAccess.getExclusionExpressionConstraintAccess().getRightDisjunctionExpressionConstraintParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
		ruleDisjunctionOperator
		{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionExpressionConstraint__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionExpressionConstraintAccess().getRightConjunctionExpressionConstraintParserRuleCall_1_1_0()); }
		ruleConjunctionExpressionConstraint
		{ after(grammarAccess.getDisjunctionExpressionConstraintAccess().getRightConjunctionExpressionConstraintParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
		ruleConjunctionOperator
		{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionExpressionConstraint__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionExpressionConstraintAccess().getRightRefinedExpressionConstraintParserRuleCall_1_1_0()); }
		ruleRefinedExpressionConstraint
		{ after(grammarAccess.getConjunctionExpressionConstraintAccess().getRightRefinedExpressionConstraintParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefinedExpressionConstraint__RefinementAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefinedExpressionConstraintAccess().getRefinementRefinementParserRuleCall_1_2_0()); }
		ruleRefinement
		{ after(grammarAccess.getRefinedExpressionConstraintAccess().getRefinementRefinementParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionRefinementSetAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
		ruleDisjunctionOperator
		{ after(grammarAccess.getDisjunctionRefinementSetAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionRefinementSet__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionRefinementSetAccess().getRightConjunctionRefinementSetParserRuleCall_1_1_0()); }
		ruleConjunctionRefinementSet
		{ after(grammarAccess.getDisjunctionRefinementSetAccess().getRightConjunctionRefinementSetParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionRefinementSetAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
		ruleConjunctionOperator
		{ after(grammarAccess.getConjunctionRefinementSetAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionRefinementSet__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionRefinementSetAccess().getRightSubRefinementParserRuleCall_1_1_0()); }
		ruleSubRefinement
		{ after(grammarAccess.getConjunctionRefinementSetAccess().getRightSubRefinementParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSetRefinement__AttributeSetAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeSetRefinementAccess().getAttributeSetDisjunctionAttributeSetParserRuleCall_0()); }
		ruleDisjunctionAttributeSet
		{ after(grammarAccess.getAttributeSetRefinementAccess().getAttributeSetDisjunctionAttributeSetParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroupRefinement__AttributeGroupAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeGroupRefinementAccess().getAttributeGroupAttributeGroupParserRuleCall_0()); }
		ruleAttributeGroup
		{ after(grammarAccess.getAttributeGroupRefinementAccess().getAttributeGroupAttributeGroupParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionAttributeSetAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
		ruleDisjunctionOperator
		{ after(grammarAccess.getDisjunctionAttributeSetAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionAttributeSet__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionAttributeSetAccess().getRightConjunctionAttributeSetParserRuleCall_1_1_0()); }
		ruleConjunctionAttributeSet
		{ after(grammarAccess.getDisjunctionAttributeSetAccess().getRightConjunctionAttributeSetParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionAttributeSetAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
		ruleConjunctionOperator
		{ after(grammarAccess.getConjunctionAttributeSetAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConjunctionAttributeSet__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConjunctionAttributeSetAccess().getRightPrimaryAttributeSetParserRuleCall_1_1_0()); }
		rulePrimaryAttributeSet
		{ after(grammarAccess.getConjunctionAttributeSetAccess().getRightPrimaryAttributeSetParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__CardinalityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getCardinalityCardinalityParserRuleCall_0_0()); }
		ruleCardinality
		{ after(grammarAccess.getAttributeAccess().getCardinalityCardinalityParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ReversedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getReversedREVERSETerminalRuleCall_1_0()); }
		RULE_REVERSE
		{ after(grammarAccess.getAttributeAccess().getReversedREVERSETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__OpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getOpAttributeOperatorEnumRuleCall_2_0()); }
		ruleAttributeOperator
		{ after(grammarAccess.getAttributeAccess().getOpAttributeOperatorEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ConceptRefAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getConceptRefConceptReferenceParserRuleCall_3_0_0()); }
		ruleConceptReference
		{ after(grammarAccess.getAttributeAccess().getConceptRefConceptReferenceParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__WildcardAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getWildcardAsteriskKeyword_3_1_0()); }
		(
			{ before(grammarAccess.getAttributeAccess().getWildcardAsteriskKeyword_3_1_0()); }
			Asterisk
			{ after(grammarAccess.getAttributeAccess().getWildcardAsteriskKeyword_3_1_0()); }
		)
		{ after(grammarAccess.getAttributeAccess().getWildcardAsteriskKeyword_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValueAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getValueAttributeValueParserRuleCall_4_0()); }
		ruleAttributeValue
		{ after(grammarAccess.getAttributeAccess().getValueAttributeValueParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__FromAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCardinalityAccess().getFromINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCardinalityAccess().getFromINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__ToAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCardinalityAccess().getToINTTerminalRuleCall_3_0_0()); }
		RULE_INT
		{ after(grammarAccess.getCardinalityAccess().getToINTTerminalRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__ManyAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCardinalityAccess().getManyAsteriskKeyword_3_1_0()); }
		(
			{ before(grammarAccess.getCardinalityAccess().getManyAsteriskKeyword_3_1_0()); }
			Asterisk
			{ after(grammarAccess.getCardinalityAccess().getManyAsteriskKeyword_3_1_0()); }
		)
		{ after(grammarAccess.getCardinalityAccess().getManyAsteriskKeyword_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getOpStringComparisonOperatorEnumRuleCall_0_0()); }
		ruleStringComparisonOperator
		{ after(grammarAccess.getStringValueAccess().getOpStringComparisonOperatorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericValueAccess().getOpNumericComparisonOperatorEnumRuleCall_0_0()); }
		ruleNumericComparisonOperator
		{ after(grammarAccess.getNumericValueAccess().getOpNumericComparisonOperatorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericValue__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericValueAccess().getValueNumberParserRuleCall_2_0()); }
		ruleNumber
		{ after(grammarAccess.getNumericValueAccess().getValueNumberParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionValue__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionValueAccess().getOpExpressionComparisonOperatorEnumRuleCall_0_0()); }
		ruleExpressionComparisonOperator
		{ after(grammarAccess.getExpressionValueAccess().getOpExpressionComparisonOperatorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionValue__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionValueAccess().getValuePrimaryExpressionConstraintParserRuleCall_1_0()); }
		rulePrimaryExpressionConstraint
		{ after(grammarAccess.getExpressionValueAccess().getValuePrimaryExpressionConstraintParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__CardinalityAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeGroupAccess().getCardinalityCardinalityParserRuleCall_0_0()); }
		ruleCardinality
		{ after(grammarAccess.getAttributeGroupAccess().getCardinalityCardinalityParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeGroup__AttributeSetAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeGroupAccess().getAttributeSetDisjunctionAttributeSetParserRuleCall_2_0()); }
		ruleDisjunctionAttributeSet
		{ after(grammarAccess.getAttributeGroupAccess().getAttributeSetDisjunctionAttributeSetParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpressionConstraint__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleExpressionConstraintAccess().getOpConstraintOperatorEnumRuleCall_0_0()); }
		ruleConstraintOperator
		{ after(grammarAccess.getSimpleExpressionConstraintAccess().getOpConstraintOperatorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpressionConstraint__ConceptAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleExpressionConstraintAccess().getConceptFocusConceptParserRuleCall_1_0()); }
		ruleFocusConcept
		{ after(grammarAccess.getSimpleExpressionConstraintAccess().getConceptFocusConceptParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FocusConcept__MemberOfAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFocusConceptAccess().getMemberOfCircumflexAccentKeyword_0_0()); }
		(
			{ before(grammarAccess.getFocusConceptAccess().getMemberOfCircumflexAccentKeyword_0_0()); }
			CircumflexAccent
			{ after(grammarAccess.getFocusConceptAccess().getMemberOfCircumflexAccentKeyword_0_0()); }
		)
		{ after(grammarAccess.getFocusConceptAccess().getMemberOfCircumflexAccentKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FocusConcept__ConceptRefAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFocusConceptAccess().getConceptRefConceptReferenceParserRuleCall_1_0_0()); }
		ruleConceptReference
		{ after(grammarAccess.getFocusConceptAccess().getConceptRefConceptReferenceParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FocusConcept__WildcardAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFocusConceptAccess().getWildcardAsteriskKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getFocusConceptAccess().getWildcardAsteriskKeyword_1_1_0()); }
			Asterisk
			{ after(grammarAccess.getFocusConceptAccess().getWildcardAsteriskKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getFocusConceptAccess().getWildcardAsteriskKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptReference__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptReferenceAccess().getIdConceptIDParserRuleCall_0_0()); }
		ruleConceptID
		{ after(grammarAccess.getConceptReferenceAccess().getIdConceptIDParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptReference__TermAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptReferenceAccess().getTermTERM_STRINGTerminalRuleCall_1_0()); }
		RULE_TERM_STRING
		{ after(grammarAccess.getConceptReferenceAccess().getTermTERM_STRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
