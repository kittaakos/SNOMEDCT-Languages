/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.akitta.snomed.ecl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.akitta.snomed.ecl.ide.contentassist.antlr.internal.InternalEclParser;
import org.akitta.snomed.ecl.services.EclGrammarAccess;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class EclParser extends AbstractContentAssistParser {

	@Inject
	private EclGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEclParser createParser() {
		InternalEclParser result = new InternalEclParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSubRefinementAccess().getAlternatives(), "rule__SubRefinement__Alternatives");
					put(grammarAccess.getPrimaryAttributeSetAccess().getAlternatives(), "rule__PrimaryAttributeSet__Alternatives");
					put(grammarAccess.getAttributeAccess().getAlternatives_3(), "rule__Attribute__Alternatives_3");
					put(grammarAccess.getCardinalityAccess().getAlternatives_3(), "rule__Cardinality__Alternatives_3");
					put(grammarAccess.getAttributeValueAccess().getAlternatives(), "rule__AttributeValue__Alternatives");
					put(grammarAccess.getPrimaryExpressionConstraintAccess().getAlternatives(), "rule__PrimaryExpressionConstraint__Alternatives");
					put(grammarAccess.getFocusConceptAccess().getAlternatives_1(), "rule__FocusConcept__Alternatives_1");
					put(grammarAccess.getExpressionComparisonOperatorAccess().getAlternatives(), "rule__ExpressionComparisonOperator__Alternatives");
					put(grammarAccess.getStringComparisonOperatorAccess().getAlternatives(), "rule__StringComparisonOperator__Alternatives");
					put(grammarAccess.getNumericComparisonOperatorAccess().getAlternatives(), "rule__NumericComparisonOperator__Alternatives");
					put(grammarAccess.getConstraintOperatorAccess().getAlternatives(), "rule__ConstraintOperator__Alternatives");
					put(grammarAccess.getAttributeOperatorAccess().getAlternatives(), "rule__AttributeOperator__Alternatives");
					put(grammarAccess.getBinaryOperatorAccess().getAlternatives(), "rule__BinaryOperator__Alternatives");
					put(grammarAccess.getConjunctionOperatorAccess().getAlternatives(), "rule__ConjunctionOperator__Alternatives");
					put(grammarAccess.getExclusionExpressionConstraintAccess().getGroup(), "rule__ExclusionExpressionConstraint__Group__0");
					put(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1(), "rule__ExclusionExpressionConstraint__Group_1__0");
					put(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1_0(), "rule__ExclusionExpressionConstraint__Group_1_0__0");
					put(grammarAccess.getExclusionExpressionConstraintAccess().getGroup_1_0_0(), "rule__ExclusionExpressionConstraint__Group_1_0_0__0");
					put(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup(), "rule__DisjunctionExpressionConstraint__Group__0");
					put(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1(), "rule__DisjunctionExpressionConstraint__Group_1__0");
					put(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1_0(), "rule__DisjunctionExpressionConstraint__Group_1_0__0");
					put(grammarAccess.getDisjunctionExpressionConstraintAccess().getGroup_1_0_0(), "rule__DisjunctionExpressionConstraint__Group_1_0_0__0");
					put(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup(), "rule__ConjunctionExpressionConstraint__Group__0");
					put(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1(), "rule__ConjunctionExpressionConstraint__Group_1__0");
					put(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1_0(), "rule__ConjunctionExpressionConstraint__Group_1_0__0");
					put(grammarAccess.getConjunctionExpressionConstraintAccess().getGroup_1_0_0(), "rule__ConjunctionExpressionConstraint__Group_1_0_0__0");
					put(grammarAccess.getRefinedExpressionConstraintAccess().getGroup(), "rule__RefinedExpressionConstraint__Group__0");
					put(grammarAccess.getRefinedExpressionConstraintAccess().getGroup_1(), "rule__RefinedExpressionConstraint__Group_1__0");
					put(grammarAccess.getDisjunctionRefinementSetAccess().getGroup(), "rule__DisjunctionRefinementSet__Group__0");
					put(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1(), "rule__DisjunctionRefinementSet__Group_1__0");
					put(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1_0(), "rule__DisjunctionRefinementSet__Group_1_0__0");
					put(grammarAccess.getDisjunctionRefinementSetAccess().getGroup_1_0_0(), "rule__DisjunctionRefinementSet__Group_1_0_0__0");
					put(grammarAccess.getConjunctionRefinementSetAccess().getGroup(), "rule__ConjunctionRefinementSet__Group__0");
					put(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1(), "rule__ConjunctionRefinementSet__Group_1__0");
					put(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1_0(), "rule__ConjunctionRefinementSet__Group_1_0__0");
					put(grammarAccess.getConjunctionRefinementSetAccess().getGroup_1_0_0(), "rule__ConjunctionRefinementSet__Group_1_0_0__0");
					put(grammarAccess.getDisjunctionAttributeSetAccess().getGroup(), "rule__DisjunctionAttributeSet__Group__0");
					put(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1(), "rule__DisjunctionAttributeSet__Group_1__0");
					put(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1_0(), "rule__DisjunctionAttributeSet__Group_1_0__0");
					put(grammarAccess.getDisjunctionAttributeSetAccess().getGroup_1_0_0(), "rule__DisjunctionAttributeSet__Group_1_0_0__0");
					put(grammarAccess.getConjunctionAttributeSetAccess().getGroup(), "rule__ConjunctionAttributeSet__Group__0");
					put(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1(), "rule__ConjunctionAttributeSet__Group_1__0");
					put(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1_0(), "rule__ConjunctionAttributeSet__Group_1_0__0");
					put(grammarAccess.getConjunctionAttributeSetAccess().getGroup_1_0_0(), "rule__ConjunctionAttributeSet__Group_1_0_0__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getCardinalityAccess().getGroup(), "rule__Cardinality__Group__0");
					put(grammarAccess.getStringValueAccess().getGroup(), "rule__StringValue__Group__0");
					put(grammarAccess.getNumericValueAccess().getGroup(), "rule__NumericValue__Group__0");
					put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
					put(grammarAccess.getNumberAccess().getGroup_1(), "rule__Number__Group_1__0");
					put(grammarAccess.getExpressionValueAccess().getGroup(), "rule__ExpressionValue__Group__0");
					put(grammarAccess.getParenthesizedAttributeSetAccess().getGroup(), "rule__ParenthesizedAttributeSet__Group__0");
					put(grammarAccess.getAttributeGroupAccess().getGroup(), "rule__AttributeGroup__Group__0");
					put(grammarAccess.getParenthesizedRefinementAccess().getGroup(), "rule__ParenthesizedRefinement__Group__0");
					put(grammarAccess.getPrimaryExpressionConstraintAccess().getGroup_1(), "rule__PrimaryExpressionConstraint__Group_1__0");
					put(grammarAccess.getSimpleExpressionConstraintAccess().getGroup(), "rule__SimpleExpressionConstraint__Group__0");
					put(grammarAccess.getFocusConceptAccess().getGroup(), "rule__FocusConcept__Group__0");
					put(grammarAccess.getConceptReferenceAccess().getGroup(), "rule__ConceptReference__Group__0");
					put(grammarAccess.getScriptAccess().getConstraintAssignment(), "rule__Script__ConstraintAssignment");
					put(grammarAccess.getExclusionExpressionConstraintAccess().getOpAssignment_1_0_0_1(), "rule__ExclusionExpressionConstraint__OpAssignment_1_0_0_1");
					put(grammarAccess.getExclusionExpressionConstraintAccess().getRightAssignment_1_1(), "rule__ExclusionExpressionConstraint__RightAssignment_1_1");
					put(grammarAccess.getDisjunctionExpressionConstraintAccess().getOpAssignment_1_0_0_1(), "rule__DisjunctionExpressionConstraint__OpAssignment_1_0_0_1");
					put(grammarAccess.getDisjunctionExpressionConstraintAccess().getRightAssignment_1_1(), "rule__DisjunctionExpressionConstraint__RightAssignment_1_1");
					put(grammarAccess.getConjunctionExpressionConstraintAccess().getOpAssignment_1_0_0_1(), "rule__ConjunctionExpressionConstraint__OpAssignment_1_0_0_1");
					put(grammarAccess.getConjunctionExpressionConstraintAccess().getRightAssignment_1_1(), "rule__ConjunctionExpressionConstraint__RightAssignment_1_1");
					put(grammarAccess.getRefinedExpressionConstraintAccess().getRefinementAssignment_1_2(), "rule__RefinedExpressionConstraint__RefinementAssignment_1_2");
					put(grammarAccess.getDisjunctionRefinementSetAccess().getOpAssignment_1_0_0_1(), "rule__DisjunctionRefinementSet__OpAssignment_1_0_0_1");
					put(grammarAccess.getDisjunctionRefinementSetAccess().getRightAssignment_1_1(), "rule__DisjunctionRefinementSet__RightAssignment_1_1");
					put(grammarAccess.getConjunctionRefinementSetAccess().getOpAssignment_1_0_0_1(), "rule__ConjunctionRefinementSet__OpAssignment_1_0_0_1");
					put(grammarAccess.getConjunctionRefinementSetAccess().getRightAssignment_1_1(), "rule__ConjunctionRefinementSet__RightAssignment_1_1");
					put(grammarAccess.getAttributeSetRefinementAccess().getAttributeSetAssignment(), "rule__AttributeSetRefinement__AttributeSetAssignment");
					put(grammarAccess.getAttributeGroupRefinementAccess().getAttributeGroupAssignment(), "rule__AttributeGroupRefinement__AttributeGroupAssignment");
					put(grammarAccess.getDisjunctionAttributeSetAccess().getOpAssignment_1_0_0_1(), "rule__DisjunctionAttributeSet__OpAssignment_1_0_0_1");
					put(grammarAccess.getDisjunctionAttributeSetAccess().getRightAssignment_1_1(), "rule__DisjunctionAttributeSet__RightAssignment_1_1");
					put(grammarAccess.getConjunctionAttributeSetAccess().getOpAssignment_1_0_0_1(), "rule__ConjunctionAttributeSet__OpAssignment_1_0_0_1");
					put(grammarAccess.getConjunctionAttributeSetAccess().getRightAssignment_1_1(), "rule__ConjunctionAttributeSet__RightAssignment_1_1");
					put(grammarAccess.getAttributeAccess().getCardinalityAssignment_0(), "rule__Attribute__CardinalityAssignment_0");
					put(grammarAccess.getAttributeAccess().getReversedAssignment_1(), "rule__Attribute__ReversedAssignment_1");
					put(grammarAccess.getAttributeAccess().getOpAssignment_2(), "rule__Attribute__OpAssignment_2");
					put(grammarAccess.getAttributeAccess().getConceptRefAssignment_3_0(), "rule__Attribute__ConceptRefAssignment_3_0");
					put(grammarAccess.getAttributeAccess().getWildcardAssignment_3_1(), "rule__Attribute__WildcardAssignment_3_1");
					put(grammarAccess.getAttributeAccess().getValueAssignment_4(), "rule__Attribute__ValueAssignment_4");
					put(grammarAccess.getCardinalityAccess().getFromAssignment_1(), "rule__Cardinality__FromAssignment_1");
					put(grammarAccess.getCardinalityAccess().getToAssignment_3_0(), "rule__Cardinality__ToAssignment_3_0");
					put(grammarAccess.getCardinalityAccess().getManyAssignment_3_1(), "rule__Cardinality__ManyAssignment_3_1");
					put(grammarAccess.getStringValueAccess().getOpAssignment_0(), "rule__StringValue__OpAssignment_0");
					put(grammarAccess.getStringValueAccess().getValueAssignment_1(), "rule__StringValue__ValueAssignment_1");
					put(grammarAccess.getNumericValueAccess().getOpAssignment_0(), "rule__NumericValue__OpAssignment_0");
					put(grammarAccess.getNumericValueAccess().getValueAssignment_2(), "rule__NumericValue__ValueAssignment_2");
					put(grammarAccess.getExpressionValueAccess().getOpAssignment_0(), "rule__ExpressionValue__OpAssignment_0");
					put(grammarAccess.getExpressionValueAccess().getValueAssignment_1(), "rule__ExpressionValue__ValueAssignment_1");
					put(grammarAccess.getAttributeGroupAccess().getCardinalityAssignment_0(), "rule__AttributeGroup__CardinalityAssignment_0");
					put(grammarAccess.getAttributeGroupAccess().getAttributeSetAssignment_2(), "rule__AttributeGroup__AttributeSetAssignment_2");
					put(grammarAccess.getSimpleExpressionConstraintAccess().getOpAssignment_0(), "rule__SimpleExpressionConstraint__OpAssignment_0");
					put(grammarAccess.getSimpleExpressionConstraintAccess().getConceptAssignment_1(), "rule__SimpleExpressionConstraint__ConceptAssignment_1");
					put(grammarAccess.getFocusConceptAccess().getMemberOfAssignment_0(), "rule__FocusConcept__MemberOfAssignment_0");
					put(grammarAccess.getFocusConceptAccess().getConceptRefAssignment_1_0(), "rule__FocusConcept__ConceptRefAssignment_1_0");
					put(grammarAccess.getFocusConceptAccess().getWildcardAssignment_1_1(), "rule__FocusConcept__WildcardAssignment_1_1");
					put(grammarAccess.getConceptReferenceAccess().getIdAssignment_0(), "rule__ConceptReference__IdAssignment_0");
					put(grammarAccess.getConceptReferenceAccess().getTermAssignment_1(), "rule__ConceptReference__TermAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalEclParser typedParser = (InternalEclParser) parser;
			typedParser.entryRuleScript();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EclGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EclGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
