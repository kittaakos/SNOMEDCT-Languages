/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.akitta.snomed.ecl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.akitta.snomed.ecl.services.EclGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class EclSyntacticSequencer extends AbstractSyntacticSequencer {

	protected EclGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_p;
	protected AbstractElementAlias match_ParenthesizedRefinement_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_ParenthesizedRefinement_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (EclGrammarAccess) access;
		match_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getParenthesizedAttributeSetAccess().getLeftParenthesisKeyword_0());
		match_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getParenthesizedAttributeSetAccess().getLeftParenthesisKeyword_0());
		match_ParenthesizedRefinement_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getParenthesizedRefinementAccess().getLeftParenthesisKeyword_0());
		match_ParenthesizedRefinement_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getParenthesizedRefinementAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getREVERSERule())
			return getREVERSEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal REVERSE:
	 * 	'R'
	 * ;
	 */
	protected String getREVERSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "R";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParenthesizedRefinement_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_ParenthesizedRefinement_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParenthesizedRefinement_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_ParenthesizedRefinement_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) cardinality=Cardinality
	 *     (rule start) (ambiguity) conceptRef=ConceptReference
	 *     (rule start) (ambiguity) op=AttributeOperator
	 *     (rule start) (ambiguity) reversed?=REVERSE
	 *     (rule start) (ambiguity) wildcard?='*'
	 *     (rule start) (ambiguity) {ConjunctionAttributeSet.left=}
	 *     (rule start) (ambiguity) {DisjunctionAttributeSet.left=}
	 */
	protected void emit_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) cardinality=Cardinality
	 *     (rule start) (ambiguity) conceptRef=ConceptReference
	 *     (rule start) (ambiguity) op=AttributeOperator
	 *     (rule start) (ambiguity) reversed?=REVERSE
	 *     (rule start) (ambiguity) wildcard?='*'
	 *     (rule start) (ambiguity) {ConjunctionAttributeSet.left=}
	 *     (rule start) (ambiguity) {DisjunctionAttributeSet.left=}
	 */
	protected void emit_ParenthesizedAttributeSet_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) attributeGroup=AttributeGroup
	 *     (rule start) (ambiguity) attributeSet=DisjunctionAttributeSet
	 *     (rule start) (ambiguity) {ConjunctionRefinementSet.left=}
	 *     (rule start) (ambiguity) {DisjunctionRefinementSet.left=}
	 */
	protected void emit_ParenthesizedRefinement_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) attributeGroup=AttributeGroup
	 *     (rule start) (ambiguity) attributeSet=DisjunctionAttributeSet
	 *     (rule start) (ambiguity) {ConjunctionRefinementSet.left=}
	 *     (rule start) (ambiguity) {DisjunctionRefinementSet.left=}
	 */
	protected void emit_ParenthesizedRefinement_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
