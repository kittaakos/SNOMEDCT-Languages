/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
parser grammar InternalEclParser;

options {
	tokenVocab=InternalEclLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@header {
package org.akitta.snomed.ecl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.akitta.snomed.ecl.services.EclGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private EclGrammarAccess grammarAccess;

    public InternalEclParser(TokenStream input, EclGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Script";
   	}

   	@Override
   	protected EclGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	iv_ruleScript=ruleScript
	{ $current=$iv_ruleScript.current; }
	EOF;

// Rule Script
ruleScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getScriptAccess().getConstraintExpressionConstraintParserRuleCall_0());
			}
			lv_constraint_0_0=ruleExpressionConstraint
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getScriptRule());
				}
				set(
					$current,
					"constraint",
					lv_constraint_0_0,
					"org.akitta.snomed.ecl.Ecl.ExpressionConstraint");
				afterParserOrEnumRuleCall();
			}
		)
	)?
;

// Entry rule entryRuleExpressionConstraint
entryRuleExpressionConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionConstraintRule()); }
	iv_ruleExpressionConstraint=ruleExpressionConstraint
	{ $current=$iv_ruleExpressionConstraint.current; }
	EOF;

// Rule ExpressionConstraint
ruleExpressionConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getExpressionConstraintAccess().getExclusionExpressionConstraintParserRuleCall());
	}
	this_ExclusionExpressionConstraint_0=ruleExclusionExpressionConstraint
	{
		$current = $this_ExclusionExpressionConstraint_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExclusionExpressionConstraint
entryRuleExclusionExpressionConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExclusionExpressionConstraintRule()); }
	iv_ruleExclusionExpressionConstraint=ruleExclusionExpressionConstraint
	{ $current=$iv_ruleExclusionExpressionConstraint.current; }
	EOF;

// Rule ExclusionExpressionConstraint
ruleExclusionExpressionConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExclusionExpressionConstraintAccess().getDisjunctionExpressionConstraintParserRuleCall_0());
		}
		this_DisjunctionExpressionConstraint_0=ruleDisjunctionExpressionConstraint
		{
			$current = $this_DisjunctionExpressionConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleExclusionOperator
						)
					)
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getExclusionExpressionConstraintAccess().getExclusionExpressionConstraintLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getExclusionExpressionConstraintAccess().getOpExclusionOperatorEnumRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleExclusionOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExclusionExpressionConstraintRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.akitta.snomed.ecl.Ecl.ExclusionOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExclusionExpressionConstraintAccess().getRightDisjunctionExpressionConstraintParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleDisjunctionExpressionConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExclusionExpressionConstraintRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.akitta.snomed.ecl.Ecl.DisjunctionExpressionConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDisjunctionExpressionConstraint
entryRuleDisjunctionExpressionConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisjunctionExpressionConstraintRule()); }
	iv_ruleDisjunctionExpressionConstraint=ruleDisjunctionExpressionConstraint
	{ $current=$iv_ruleDisjunctionExpressionConstraint.current; }
	EOF;

// Rule DisjunctionExpressionConstraint
ruleDisjunctionExpressionConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getDisjunctionExpressionConstraintAccess().getConjunctionExpressionConstraintParserRuleCall_0());
		}
		this_ConjunctionExpressionConstraint_0=ruleConjunctionExpressionConstraint
		{
			$current = $this_ConjunctionExpressionConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleDisjunctionOperator
						)
					)
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getDisjunctionExpressionConstraintAccess().getDisjunctionExpressionConstraintLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getDisjunctionExpressionConstraintAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleDisjunctionOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDisjunctionExpressionConstraintRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.akitta.snomed.ecl.Ecl.DisjunctionOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDisjunctionExpressionConstraintAccess().getRightConjunctionExpressionConstraintParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleConjunctionExpressionConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDisjunctionExpressionConstraintRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.akitta.snomed.ecl.Ecl.ConjunctionExpressionConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctionExpressionConstraint
entryRuleConjunctionExpressionConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionExpressionConstraintRule()); }
	iv_ruleConjunctionExpressionConstraint=ruleConjunctionExpressionConstraint
	{ $current=$iv_ruleConjunctionExpressionConstraint.current; }
	EOF;

// Rule ConjunctionExpressionConstraint
ruleConjunctionExpressionConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConjunctionExpressionConstraintAccess().getRefinedExpressionConstraintParserRuleCall_0());
		}
		this_RefinedExpressionConstraint_0=ruleRefinedExpressionConstraint
		{
			$current = $this_RefinedExpressionConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleConjunctionOperator
						)
					)
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getConjunctionExpressionConstraintAccess().getConjunctionExpressionConstraintLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getConjunctionExpressionConstraintAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleConjunctionOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConjunctionExpressionConstraintRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.akitta.snomed.ecl.Ecl.ConjunctionOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionExpressionConstraintAccess().getRightRefinedExpressionConstraintParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleRefinedExpressionConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionExpressionConstraintRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.akitta.snomed.ecl.Ecl.RefinedExpressionConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRefinedExpressionConstraint
entryRuleRefinedExpressionConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefinedExpressionConstraintRule()); }
	iv_ruleRefinedExpressionConstraint=ruleRefinedExpressionConstraint
	{ $current=$iv_ruleRefinedExpressionConstraint.current; }
	EOF;

// Rule RefinedExpressionConstraint
ruleRefinedExpressionConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getRefinedExpressionConstraintAccess().getPrimaryExpressionConstraintParserRuleCall_0());
		}
		this_PrimaryExpressionConstraint_0=rulePrimaryExpressionConstraint
		{
			$current = $this_PrimaryExpressionConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRefinedExpressionConstraintAccess().getRefinedExpressionConstraintTargetAction_1_0(),
						$current);
				}
			)
			otherlv_2=Colon
			{
				newLeafNode(otherlv_2, grammarAccess.getRefinedExpressionConstraintAccess().getColonKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRefinedExpressionConstraintAccess().getRefinementRefinementParserRuleCall_1_2_0());
					}
					lv_refinement_3_0=ruleRefinement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRefinedExpressionConstraintRule());
						}
						set(
							$current,
							"refinement",
							lv_refinement_3_0,
							"org.akitta.snomed.ecl.Ecl.Refinement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleRefinement
entryRuleRefinement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefinementRule()); }
	iv_ruleRefinement=ruleRefinement
	{ $current=$iv_ruleRefinement.current; }
	EOF;

// Rule Refinement
ruleRefinement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getRefinementAccess().getDisjunctionRefinementSetParserRuleCall());
	}
	this_DisjunctionRefinementSet_0=ruleDisjunctionRefinementSet
	{
		$current = $this_DisjunctionRefinementSet_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleDisjunctionRefinementSet
entryRuleDisjunctionRefinementSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisjunctionRefinementSetRule()); }
	iv_ruleDisjunctionRefinementSet=ruleDisjunctionRefinementSet
	{ $current=$iv_ruleDisjunctionRefinementSet.current; }
	EOF;

// Rule DisjunctionRefinementSet
ruleDisjunctionRefinementSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getDisjunctionRefinementSetAccess().getConjunctionRefinementSetParserRuleCall_0());
		}
		this_ConjunctionRefinementSet_0=ruleConjunctionRefinementSet
		{
			$current = $this_ConjunctionRefinementSet_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleDisjunctionOperator
						)
					)
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getDisjunctionRefinementSetAccess().getDisjunctionRefinementSetLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getDisjunctionRefinementSetAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleDisjunctionOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDisjunctionRefinementSetRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.akitta.snomed.ecl.Ecl.DisjunctionOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDisjunctionRefinementSetAccess().getRightConjunctionRefinementSetParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleConjunctionRefinementSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDisjunctionRefinementSetRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.akitta.snomed.ecl.Ecl.ConjunctionRefinementSet");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctionRefinementSet
entryRuleConjunctionRefinementSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionRefinementSetRule()); }
	iv_ruleConjunctionRefinementSet=ruleConjunctionRefinementSet
	{ $current=$iv_ruleConjunctionRefinementSet.current; }
	EOF;

// Rule ConjunctionRefinementSet
ruleConjunctionRefinementSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConjunctionRefinementSetAccess().getSubRefinementParserRuleCall_0());
		}
		this_SubRefinement_0=ruleSubRefinement
		{
			$current = $this_SubRefinement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleConjunctionOperator
						)
					)
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getConjunctionRefinementSetAccess().getConjunctionRefinementSetLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getConjunctionRefinementSetAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleConjunctionOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConjunctionRefinementSetRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.akitta.snomed.ecl.Ecl.ConjunctionOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionRefinementSetAccess().getRightSubRefinementParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleSubRefinement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionRefinementSetRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.akitta.snomed.ecl.Ecl.SubRefinement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSubRefinement
entryRuleSubRefinement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubRefinementRule()); }
	iv_ruleSubRefinement=ruleSubRefinement
	{ $current=$iv_ruleSubRefinement.current; }
	EOF;

// Rule SubRefinement
ruleSubRefinement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSubRefinementAccess().getAttributeSetRefinementParserRuleCall_0());
		}
		this_AttributeSetRefinement_0=ruleAttributeSetRefinement
		{
			$current = $this_AttributeSetRefinement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSubRefinementAccess().getAttributeGroupRefinementParserRuleCall_1());
		}
		this_AttributeGroupRefinement_1=ruleAttributeGroupRefinement
		{
			$current = $this_AttributeGroupRefinement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSubRefinementAccess().getParenthesizedRefinementParserRuleCall_2());
		}
		this_ParenthesizedRefinement_2=ruleParenthesizedRefinement
		{
			$current = $this_ParenthesizedRefinement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttributeSetRefinement
entryRuleAttributeSetRefinement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeSetRefinementRule()); }
	iv_ruleAttributeSetRefinement=ruleAttributeSetRefinement
	{ $current=$iv_ruleAttributeSetRefinement.current; }
	EOF;

// Rule AttributeSetRefinement
ruleAttributeSetRefinement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAttributeSetRefinementAccess().getAttributeSetDisjunctionAttributeSetParserRuleCall_0());
			}
			lv_attributeSet_0_0=ruleDisjunctionAttributeSet
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAttributeSetRefinementRule());
				}
				set(
					$current,
					"attributeSet",
					lv_attributeSet_0_0,
					"org.akitta.snomed.ecl.Ecl.DisjunctionAttributeSet");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAttributeGroupRefinement
entryRuleAttributeGroupRefinement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeGroupRefinementRule()); }
	iv_ruleAttributeGroupRefinement=ruleAttributeGroupRefinement
	{ $current=$iv_ruleAttributeGroupRefinement.current; }
	EOF;

// Rule AttributeGroupRefinement
ruleAttributeGroupRefinement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAttributeGroupRefinementAccess().getAttributeGroupAttributeGroupParserRuleCall_0());
			}
			lv_attributeGroup_0_0=ruleAttributeGroup
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAttributeGroupRefinementRule());
				}
				set(
					$current,
					"attributeGroup",
					lv_attributeGroup_0_0,
					"org.akitta.snomed.ecl.Ecl.AttributeGroup");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDisjunctionAttributeSet
entryRuleDisjunctionAttributeSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisjunctionAttributeSetRule()); }
	iv_ruleDisjunctionAttributeSet=ruleDisjunctionAttributeSet
	{ $current=$iv_ruleDisjunctionAttributeSet.current; }
	EOF;

// Rule DisjunctionAttributeSet
ruleDisjunctionAttributeSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getDisjunctionAttributeSetAccess().getConjunctionAttributeSetParserRuleCall_0());
		}
		this_ConjunctionAttributeSet_0=ruleConjunctionAttributeSet
		{
			$current = $this_ConjunctionAttributeSet_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleDisjunctionOperator
						)
					)
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getDisjunctionAttributeSetAccess().getDisjunctionAttributeSetLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getDisjunctionAttributeSetAccess().getOpDisjunctionOperatorEnumRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleDisjunctionOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDisjunctionAttributeSetRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.akitta.snomed.ecl.Ecl.DisjunctionOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDisjunctionAttributeSetAccess().getRightConjunctionAttributeSetParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleConjunctionAttributeSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDisjunctionAttributeSetRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.akitta.snomed.ecl.Ecl.ConjunctionAttributeSet");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctionAttributeSet
entryRuleConjunctionAttributeSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionAttributeSetRule()); }
	iv_ruleConjunctionAttributeSet=ruleConjunctionAttributeSet
	{ $current=$iv_ruleConjunctionAttributeSet.current; }
	EOF;

// Rule ConjunctionAttributeSet
ruleConjunctionAttributeSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConjunctionAttributeSetAccess().getPrimaryAttributeSetParserRuleCall_0());
		}
		this_PrimaryAttributeSet_0=rulePrimaryAttributeSet
		{
			$current = $this_PrimaryAttributeSet_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleConjunctionOperator
						)
					)
				)
				)=>
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getConjunctionAttributeSetAccess().getConjunctionAttributeSetLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getConjunctionAttributeSetAccess().getOpConjunctionOperatorEnumRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleConjunctionOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConjunctionAttributeSetRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.akitta.snomed.ecl.Ecl.ConjunctionOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionAttributeSetAccess().getRightPrimaryAttributeSetParserRuleCall_1_1_0());
					}
					lv_right_3_0=rulePrimaryAttributeSet
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionAttributeSetRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.akitta.snomed.ecl.Ecl.PrimaryAttributeSet");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryAttributeSet
entryRulePrimaryAttributeSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryAttributeSetRule()); }
	iv_rulePrimaryAttributeSet=rulePrimaryAttributeSet
	{ $current=$iv_rulePrimaryAttributeSet.current; }
	EOF;

// Rule PrimaryAttributeSet
rulePrimaryAttributeSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryAttributeSetAccess().getParenthesizedAttributeSetParserRuleCall_0());
		}
		this_ParenthesizedAttributeSet_0=ruleParenthesizedAttributeSet
		{
			$current = $this_ParenthesizedAttributeSet_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryAttributeSetAccess().getAttributeParserRuleCall_1());
		}
		this_Attribute_1=ruleAttribute
		{
			$current = $this_Attribute_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getCardinalityCardinalityParserRuleCall_0_0());
				}
				lv_cardinality_0_0=ruleCardinality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"cardinality",
						lv_cardinality_0_0,
						"org.akitta.snomed.ecl.Ecl.Cardinality");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_reversed_1_0=RULE_REVERSE
				{
					newLeafNode(lv_reversed_1_0, grammarAccess.getAttributeAccess().getReversedREVERSETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"reversed",
						true,
						"org.akitta.snomed.ecl.Ecl.REVERSE");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getOpAttributeOperatorEnumRuleCall_2_0());
				}
				lv_op_2_0=ruleAttributeOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"org.akitta.snomed.ecl.Ecl.AttributeOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getConceptRefConceptReferenceParserRuleCall_3_0_0());
					}
					lv_conceptRef_3_0=ruleConceptReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"conceptRef",
							lv_conceptRef_3_0,
							"org.akitta.snomed.ecl.Ecl.ConceptReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_wildcard_4_0=Asterisk
					{
						newLeafNode(lv_wildcard_4_0, grammarAccess.getAttributeAccess().getWildcardAsteriskKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
						setWithLastConsumed($current, "wildcard", true, "*");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getValueAttributeValueParserRuleCall_4_0());
				}
				lv_value_5_0=ruleAttributeValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"org.akitta.snomed.ecl.Ecl.AttributeValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCardinality
entryRuleCardinality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCardinalityRule()); }
	iv_ruleCardinality=ruleCardinality
	{ $current=$iv_ruleCardinality.current; }
	EOF;

// Rule Cardinality
ruleCardinality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftSquareBracket
		{
			newLeafNode(otherlv_0, grammarAccess.getCardinalityAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_from_1_0=RULE_INT
				{
					newLeafNode(lv_from_1_0, grammarAccess.getCardinalityAccess().getFromINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCardinalityRule());
					}
					setWithLastConsumed(
						$current,
						"from",
						lv_from_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=FullStopFullStop
		{
			newLeafNode(otherlv_2, grammarAccess.getCardinalityAccess().getFullStopFullStopKeyword_2());
		}
		(
			(
				(
					lv_to_3_0=RULE_INT
					{
						newLeafNode(lv_to_3_0, grammarAccess.getCardinalityAccess().getToINTTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCardinalityRule());
						}
						setWithLastConsumed(
							$current,
							"to",
							lv_to_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			    |
			(
				(
					lv_many_4_0=Asterisk
					{
						newLeafNode(lv_many_4_0, grammarAccess.getCardinalityAccess().getManyAsteriskKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCardinalityRule());
						}
						setWithLastConsumed($current, "many", true, "*");
					}
				)
			)
		)
		otherlv_5=RightSquareBracket
		{
			newLeafNode(otherlv_5, grammarAccess.getCardinalityAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeValueRule()); }
	iv_ruleAttributeValue=ruleAttributeValue
	{ $current=$iv_ruleAttributeValue.current; }
	EOF;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAttributeValueAccess().getExpressionValueParserRuleCall_0());
		}
		this_ExpressionValue_0=ruleExpressionValue
		{
			$current = $this_ExpressionValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAttributeValueAccess().getNumericValueParserRuleCall_1());
		}
		this_NumericValue_1=ruleNumericValue
		{
			$current = $this_NumericValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAttributeValueAccess().getStringValueParserRuleCall_2());
		}
		this_StringValue_2=ruleStringValue
		{
			$current = $this_StringValue_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValueAccess().getOpStringComparisonOperatorEnumRuleCall_0_0());
				}
				lv_op_0_0=ruleStringComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValueRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.akitta.snomed.ecl.Ecl.StringComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleNumericValue
entryRuleNumericValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericValueRule()); }
	iv_ruleNumericValue=ruleNumericValue
	{ $current=$iv_ruleNumericValue.current; }
	EOF;

// Rule NumericValue
ruleNumericValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericValueAccess().getOpNumericComparisonOperatorEnumRuleCall_0_0());
				}
				lv_op_0_0=ruleNumericComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericValueRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.akitta.snomed.ecl.Ecl.NumericComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=NumberSign
		{
			newLeafNode(otherlv_1, grammarAccess.getNumericValueAccess().getNumberSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNumericValueAccess().getValueNumberParserRuleCall_2_0());
				}
				lv_value_2_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumericValueRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.akitta.snomed.ecl.Ecl.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0());
		}
		(
			kw=FullStop
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

// Entry rule entryRuleExpressionValue
entryRuleExpressionValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionValueRule()); }
	iv_ruleExpressionValue=ruleExpressionValue
	{ $current=$iv_ruleExpressionValue.current; }
	EOF;

// Rule ExpressionValue
ruleExpressionValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionValueAccess().getOpExpressionComparisonOperatorEnumRuleCall_0_0());
				}
				lv_op_0_0=ruleExpressionComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionValueRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.akitta.snomed.ecl.Ecl.ExpressionComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionValueAccess().getValuePrimaryExpressionConstraintParserRuleCall_1_0());
				}
				lv_value_1_0=rulePrimaryExpressionConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionValueRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.akitta.snomed.ecl.Ecl.PrimaryExpressionConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParenthesizedAttributeSet
entryRuleParenthesizedAttributeSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesizedAttributeSetRule()); }
	iv_ruleParenthesizedAttributeSet=ruleParenthesizedAttributeSet
	{ $current=$iv_ruleParenthesizedAttributeSet.current; }
	EOF;

// Rule ParenthesizedAttributeSet
ruleParenthesizedAttributeSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftParenthesis
		{
			newLeafNode(otherlv_0, grammarAccess.getParenthesizedAttributeSetAccess().getLeftParenthesisKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getParenthesizedAttributeSetAccess().getDisjunctionAttributeSetParserRuleCall_1());
		}
		this_DisjunctionAttributeSet_1=ruleDisjunctionAttributeSet
		{
			$current = $this_DisjunctionAttributeSet_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=RightParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getParenthesizedAttributeSetAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleAttributeGroup
entryRuleAttributeGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeGroupRule()); }
	iv_ruleAttributeGroup=ruleAttributeGroup
	{ $current=$iv_ruleAttributeGroup.current; }
	EOF;

// Rule AttributeGroup
ruleAttributeGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeGroupAccess().getCardinalityCardinalityParserRuleCall_0_0());
				}
				lv_cardinality_0_0=ruleCardinality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeGroupRule());
					}
					set(
						$current,
						"cardinality",
						lv_cardinality_0_0,
						"org.akitta.snomed.ecl.Ecl.Cardinality");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=LeftCurlyBracket
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeGroupAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeGroupAccess().getAttributeSetDisjunctionAttributeSetParserRuleCall_2_0());
				}
				lv_attributeSet_2_0=ruleDisjunctionAttributeSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeGroupRule());
					}
					set(
						$current,
						"attributeSet",
						lv_attributeSet_2_0,
						"org.akitta.snomed.ecl.Ecl.DisjunctionAttributeSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=RightCurlyBracket
		{
			newLeafNode(otherlv_3, grammarAccess.getAttributeGroupAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleParenthesizedRefinement
entryRuleParenthesizedRefinement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesizedRefinementRule()); }
	iv_ruleParenthesizedRefinement=ruleParenthesizedRefinement
	{ $current=$iv_ruleParenthesizedRefinement.current; }
	EOF;

// Rule ParenthesizedRefinement
ruleParenthesizedRefinement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftParenthesis
		{
			newLeafNode(otherlv_0, grammarAccess.getParenthesizedRefinementAccess().getLeftParenthesisKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getParenthesizedRefinementAccess().getRefinementParserRuleCall_1());
		}
		this_Refinement_1=ruleRefinement
		{
			$current = $this_Refinement_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=RightParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getParenthesizedRefinementAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulePrimaryExpressionConstraint
entryRulePrimaryExpressionConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionConstraintRule()); }
	iv_rulePrimaryExpressionConstraint=rulePrimaryExpressionConstraint
	{ $current=$iv_rulePrimaryExpressionConstraint.current; }
	EOF;

// Rule PrimaryExpressionConstraint
rulePrimaryExpressionConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionConstraintAccess().getSimpleExpressionConstraintParserRuleCall_0());
		}
		this_SimpleExpressionConstraint_0=ruleSimpleExpressionConstraint
		{
			$current = $this_SimpleExpressionConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1=LeftParenthesis
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionConstraintAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionConstraintAccess().getExpressionConstraintParserRuleCall_1_1());
			}
			this_ExpressionConstraint_2=ruleExpressionConstraint
			{
				$current = $this_ExpressionConstraint_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPrimaryExpressionConstraintAccess().getParenthesizedExpressionConstraintCurrentAction_1_2(),
						$current);
				}
			)
			otherlv_4=RightParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionConstraintAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleSimpleExpressionConstraint
entryRuleSimpleExpressionConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionConstraintRule()); }
	iv_ruleSimpleExpressionConstraint=ruleSimpleExpressionConstraint
	{ $current=$iv_ruleSimpleExpressionConstraint.current; }
	EOF;

// Rule SimpleExpressionConstraint
ruleSimpleExpressionConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getOpConstraintOperatorEnumRuleCall_0_0());
				}
				lv_op_0_0=ruleConstraintOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleExpressionConstraintRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.akitta.snomed.ecl.Ecl.ConstraintOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getConceptFocusConceptParserRuleCall_1_0());
				}
				lv_concept_1_0=ruleFocusConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleExpressionConstraintRule());
					}
					set(
						$current,
						"concept",
						lv_concept_1_0,
						"org.akitta.snomed.ecl.Ecl.FocusConcept");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFocusConcept
entryRuleFocusConcept returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFocusConceptRule()); }
	iv_ruleFocusConcept=ruleFocusConcept
	{ $current=$iv_ruleFocusConcept.current; }
	EOF;

// Rule FocusConcept
ruleFocusConcept returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_memberOf_0_0=CircumflexAccent
				{
					newLeafNode(lv_memberOf_0_0, grammarAccess.getFocusConceptAccess().getMemberOfCircumflexAccentKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFocusConceptRule());
					}
					setWithLastConsumed($current, "memberOf", true, "^");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFocusConceptAccess().getConceptRefConceptReferenceParserRuleCall_1_0_0());
					}
					lv_conceptRef_1_0=ruleConceptReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFocusConceptRule());
						}
						set(
							$current,
							"conceptRef",
							lv_conceptRef_1_0,
							"org.akitta.snomed.ecl.Ecl.ConceptReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					lv_wildcard_2_0=Asterisk
					{
						newLeafNode(lv_wildcard_2_0, grammarAccess.getFocusConceptAccess().getWildcardAsteriskKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFocusConceptRule());
						}
						setWithLastConsumed($current, "wildcard", true, "*");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleConceptReference
entryRuleConceptReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptReferenceRule()); }
	iv_ruleConceptReference=ruleConceptReference
	{ $current=$iv_ruleConceptReference.current; }
	EOF;

// Rule ConceptReference
ruleConceptReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConceptReferenceAccess().getIdConceptIDParserRuleCall_0_0());
				}
				lv_id_0_0=ruleConceptID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConceptReferenceRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"org.akitta.snomed.ecl.Ecl.ConceptID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_term_1_0=RULE_TERM_STRING
				{
					newLeafNode(lv_term_1_0, grammarAccess.getConceptReferenceAccess().getTermTERM_STRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConceptReferenceRule());
					}
					setWithLastConsumed(
						$current,
						"term",
						lv_term_1_0,
						"org.akitta.snomed.ecl.Ecl.TERM_STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleConceptID
entryRuleConceptID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConceptIDRule()); }
	iv_ruleConceptID=ruleConceptID
	{ $current=$iv_ruleConceptID.current.getText(); }
	EOF;

// Rule ConceptID
ruleConceptID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getConceptIDAccess().getINTTerminalRuleCall());
	}
;

// Rule ExpressionComparisonOperator
ruleExpressionComparisonOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=EqualsSign
			{
				$current = grammarAccess.getExpressionComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getExpressionComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=ExclamationMarkEqualsSign
			{
				$current = grammarAccess.getExpressionComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getExpressionComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule StringComparisonOperator
ruleStringComparisonOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=EqualsSign
			{
				$current = grammarAccess.getStringComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStringComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=ExclamationMarkEqualsSign
			{
				$current = grammarAccess.getStringComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStringComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule NumericComparisonOperator
ruleNumericComparisonOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=EqualsSign
			{
				$current = grammarAccess.getNumericComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNumericComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=ExclamationMarkEqualsSign
			{
				$current = grammarAccess.getNumericComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNumericComparisonOperatorAccess().getNOT_EQUALSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=LessThanSign
			{
				$current = grammarAccess.getNumericComparisonOperatorAccess().getLESS_THANEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNumericComparisonOperatorAccess().getLESS_THANEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=LessThanSignEqualsSign
			{
				$current = grammarAccess.getNumericComparisonOperatorAccess().getLESS_THAN_EQUALSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNumericComparisonOperatorAccess().getLESS_THAN_EQUALSEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4=GreaterThanSign
			{
				$current = grammarAccess.getNumericComparisonOperatorAccess().getGREATER_THANEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNumericComparisonOperatorAccess().getGREATER_THANEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5=GreaterThanSignEqualsSign
			{
				$current = grammarAccess.getNumericComparisonOperatorAccess().getGREATER_THAN_EQUALSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getNumericComparisonOperatorAccess().getGREATER_THAN_EQUALSEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule ConstraintOperator
ruleConstraintOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=LessThanSign
			{
				$current = grammarAccess.getConstraintOperatorAccess().getDESCENDANTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConstraintOperatorAccess().getDESCENDANTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LessThanSignLessThanSign
			{
				$current = grammarAccess.getConstraintOperatorAccess().getDESCENDANT_OR_SELFEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConstraintOperatorAccess().getDESCENDANT_OR_SELFEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=GreaterThanSign
			{
				$current = grammarAccess.getConstraintOperatorAccess().getANCESTOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getConstraintOperatorAccess().getANCESTOREnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=GreaterThanSignGreaterThanSign
			{
				$current = grammarAccess.getConstraintOperatorAccess().getANCESTOR_OR_SELFEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getConstraintOperatorAccess().getANCESTOR_OR_SELFEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AttributeOperator
ruleAttributeOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=LessThanSign
			{
				$current = grammarAccess.getAttributeOperatorAccess().getDESCENDANTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAttributeOperatorAccess().getDESCENDANTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=LessThanSignLessThanSign
			{
				$current = grammarAccess.getAttributeOperatorAccess().getDESCENDANT_OR_SELFEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAttributeOperatorAccess().getDESCENDANT_OR_SELFEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ConjunctionOperator
ruleConjunctionOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=AND
			{
				$current = grammarAccess.getConjunctionOperatorAccess().getCONJUNCTIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConjunctionOperatorAccess().getCONJUNCTIONEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Comma
			{
				$current = grammarAccess.getConjunctionOperatorAccess().getCONJUNCTIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConjunctionOperatorAccess().getCONJUNCTIONEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule DisjunctionOperator
ruleDisjunctionOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=OR
		{
			$current = grammarAccess.getDisjunctionOperatorAccess().getDISJUNCTIONEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getDisjunctionOperatorAccess().getDISJUNCTIONEnumLiteralDeclaration());
		}
	)
;

// Rule ExclusionOperator
ruleExclusionOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=MINUS
		{
			$current = grammarAccess.getExclusionOperatorAccess().getEXCLUSIONEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getExclusionOperatorAccess().getEXCLUSIONEnumLiteralDeclaration());
		}
	)
;
